@namespace GamifyingTasks.Pages.Components
@using Google.Cloud.Firestore;
@using GamifyingTasks.Firebase.DB
@using GamifyingTasks.Classes
@using GamifyingTasks.Pages.Popups
@using GamifyingTasks.Data
@using GamifyingTasks.Firebase.DB.Interfaces
@inject ITasks _tasks
@inject IUsers _users
@inject IDialogService DialogService
@inject NavigationManager navManger
<MudPaper Elevation="1" Height="430px">
    <MudCard Elevation="0">
        <MudCardContent class="d-flex flex-column flex-grow-1">
            <div class="d-flex justify-center">
                <MudText>
                    <b>Upcoming Tasks</b>
                </MudText>
            </div>
            <div>
                @if (loading)
                {
                    <div class="d-flex justify-center mt-5">
                        <MudText> Loading Content</MudText>
                    </div>
                }
                @if (upcomingTasks.Count() <= 0 && !loading)
                {
                    <div class="d-flex justify-center mt-5">

                        <MudText>
                            No Upcoming Tasks!
                        </MudText>
                    </div>
                }
                <div Style="height: 430x; wdith: 75%; overflow-x: hidden; overflow-y: auto;">
                    @if (upcomingTasks.Count() > 0 && upcomingTasks != null && !loading)
                    {
                        @foreach (var task in upcomingTasks)
                        {
                            @if (task.DueDate.ToDateTime().Date != new DateTime(9999, 12,
                           31).ToUniversalTime().Date && task.DueDate.ToDateTime().Date >=
                           DateTime.UtcNow.AddDays(1).Date
                           && !task.Completed)
                            {
                                <MudGrid>
                                    <MudItem xs="3">
                                        <MudPaper class="d-flex d-sm-none align-center justify-center mt-1 ml-6" Elevation="0">
                                            <MudButton Variant="Variant.Text" @onclick="() => ToggleViewDetails(task)">
                                                <MudText Typo="Typo.body2">
                                                    @task.Name
                                                </MudText>
                                                <!-- Display the task description if the task is clicked -->
                                                <MudPopover Open="@(SelectedTask == task && viewTask)"
                                                    OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomRight"
                                                    TransformOrigin="Origin.TopCenter" Paper="false">
                                                    <MudPaper>
                                                        @if (SelectedTask != null)
                                                        {
                                                            <MudText>
                                                                @SelectedTask.Description
                                                            </MudText>
                                                            <!-- Display the due date if the task has a due date -->
                                                            @if (SelectedTask.DueDate != Timestamp.FromDateTime(new DateTime(9999, 12,
                                                           31).ToUniversalTime()))
                                                            {

                                                                <MudPaper class="d-flex align-center justify-center mt-1 ml-2"
                                                                    Elevation="0">
                                                                    <MudText Typo="Typo.subtitle2">
                                                                        <b>Due Date: @ConvertDate(SelectedTask.DueDate).Result</b>
                                                                    </MudText>
                                                                </MudPaper>
                                                            }
                                                        }

                                                    </MudPaper>

                                                </MudPopover>

                                            </MudButton>
                                        </MudPaper>
                                    </MudItem>
                                    <MudItem xs="4">
                                        <MudPaper class="d-flex d-sm-none flex-row gap-2 jusitfy-end ml-6 mt-2" Elevation="0"
                                            Width="15%" Height="65%">
                                            <MudPaper Elevation="0">
                                                <MudFab @onclick="() => CompleteTask(task)" Size="Size.Small"
                                                    Color="Color.Success" StartIcon="@Icons.Material.Filled.Check" />
                                            </MudPaper>
                                            <MudPaper Elevation="0">
                                                <MudFab Size="Size.Small" @onclick="() => DeleteTask(task.UID)" Color="Color.Error"
                                                    StartIcon="@Icons.Material.Filled.SkipNext" />
                                            </MudPaper>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>


                                <div class="d-none d-sm-flex flex-row gap-3 justify-space-between mt-3">
                                    <MudButton Variant="Variant.Text" Typo="Typo.body2"
                                        @onclick="() => ToggleViewDetails(task)">
                                        <MudText>
                                            @task.Name
                                        </MudText>
                                        <MudPopover Open="@(SelectedTask == task && viewTask)"
                                            OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomRight"
                                            TransformOrigin="Origin.TopCenter" Paper="false">
                                            <MudPaper>
                                                @if (SelectedTask != null)
                                                {
                                                    <MudText>
                                                        @SelectedTask.Description
                                                    </MudText>
                                                    @if (SelectedTask.DueDate != Timestamp.FromDateTime(new DateTime(9999, 12,
                                                   31).ToUniversalTime()))
                                                    {
                                                        <MudPaper class="d-flex align-center justify-center mt-1 ml-2" Elevation="0">
                                                            <MudText Typo="Typo.subtitle2">
                                                                <b>Due Date: @ConvertDate(SelectedTask.DueDate).Result</b>
                                                            </MudText>
                                                        </MudPaper>
                                                    }
                                                }
                                            </MudPaper>
                                        </MudPopover>
                                    </MudButton>
                                    <div class="d-flex align-end">
                                        <MudButtonGroup Color="Color.Success" Variant="Variant.Filled">
                                            <MudButton Color="Color.Success" @onclick="() => CompleteTask(task)"
                                                Size="Size.Small">
                                                Confirm</MudButton>
                                            <MudButton Color="Color.Error" Size="Size.Small" @onclick="() => DeleteTask(task.UID)">
                                                Skip</MudButton>
                                        </MudButtonGroup>
                                    </div>
                                </div>
                            }
                        }


                    }
                </div>
            </div>

        </MudCardContent>
    </MudCard>

</MudPaper>
@code {
    [Parameter]
    public EventCallback<bool> TaskUpdated { get; set; }

    [Parameter]
    public EventCallback<bool> TaskCompleted { get; set; }
    
    private int lastCount = 0;
    private bool loading = true;
    private bool viewTask = false;
    public bool viewAddButtons = false;
    private Tasks? SelectedTask { get; set; }
    public List<Tasks> upcomingTasks = new List<Tasks>();
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
        if(firstRender)
        {
            if (_users.GetUser() != null)
            {        
                await RefreshTaskList();
            }
        }
        if(!firstRender && upcomingTasks.Count() <= 0)
        {
            lastCount = upcomingTasks.Count();
            await RefreshTaskList();
        }
        else if(!firstRender && upcomingTasks.Count() > 0 && upcomingTasks.Count() != lastCount)
        {
            lastCount = upcomingTasks.Count();
            await RefreshTaskList();
        }
 
    }
    private string _menuConfirmText = "Confirm";

    public async Task RefreshTaskList()
    {
        upcomingTasks = _tasks.GetUpcomingTasks();
        if (upcomingTasks.Count() > 0 && upcomingTasks != null)
        {
            await TaskUpdated.InvokeAsync(true);
        }
        if (loading)
        {
            loading = false;
        }

    }

    private void SetButtonText(int id)
    {
        switch (id)
        {
            case 0:
                _menuConfirmText = "Confirm";
                break;
            case 1:
                _menuConfirmText = "Skip";
                break;
        }
    }

    private void ToggleViewDetails(Tasks task)
    {
        SelectedTask = task;
        if (viewTask)
            viewTask = false;
        else
            viewTask = true;

    }
    private void ToggleAddPopup()
    {
        if (viewAddButtons)
            viewAddButtons = false;
        else
            viewAddButtons = true;

        Console.WriteLine(viewAddButtons);
    }


    public async Task CompleteTask(Tasks task)
    {
        await UserLevelCaluclations.TaskCompleted(task, _tasks, _users);
        await TaskCompleted.InvokeAsync(true);
    }

    public async Task DeleteTask(string uid)
    {
        await _tasks.DeleteTask(uid);
        await RefreshTaskList();
    }

    private async Task OpenAddNewTask()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "popup-style" };
        var dialog = DialogService.Show<Popups.AddNewTask>("Add new task", options);

        var result = await dialog.Result;

        await RefreshTaskList();
    }

    private async Task<string> ConvertDate(Timestamp timestamp)
    {
        var dt = timestamp.ToDateTime();
        return dt.ToString("dd-MM-yyyy");
    }
}