@using GamifyingTasks.Firebase.DB
@using GamifyingTasks.Classes
@using GamifyingTasks.Firebase.DB.Interfaces
@inject IUsers _users
@inject IGoals _goals
@inject NavigationManager navManger
<div calss="d-flex flex-column gap-4">
    <div class="d-flex flex-row gap-5 justify-center">
        <div>
            <!-- Enter the goal Name -->
            <MudTextField @bind-Value="goalName" Label="Goal Name" Variant="Variant.Filled" Required="true"
                RequiredError="Goal Name is Required" />
        </div>
        <div>
            <!-- Enter the level required for the goal -->
            <MudTextField @bind-Value="levelRequired" Label="Level Required to reach goal" Variant="Variant.Filled"
                InputType="InputType.Number" Required="true" />
        </div>

    </div>
    <div class="d-flex flex-row gap-4 justify-center mt-3">

        <div class="d-flex">
            <MudSelect T="string" Label="Select Rewards" Variant="Variant.Filled" @bind-Value="selectedReward">
                @foreach (var reward in Rewards)
                {
                    <MudSelectItem T="string" Value="@reward">@reward</MudSelectItem>
                }
            </MudSelect>
        </div>
        <div>
            <MudTextField @bind-Value="customReward" Label="Add Custom Reward" Variant="Variant.Filled" />
        </div>
    </div>
    <div class="d-flex ma-8 justify-end">
        <MudButton OnClick="@SaveGoal" Variant="Variant.Filled" Color="Color.Primary">
            <MudText>Save</MudText>
        </MudButton>
    </div>
</div>

@code {
    private string goalName = "";
    private int levelRequired = 0;
    private string selectedReward;
    private string customReward = "";
    private IEnumerable<string> Rewards = new List<string>()
{ "Cinema", "Eating Out", "Takeaway", "New Game", "New Clothes", "Day Out"};
    private HashSet<string> SelectedRewards = new HashSet<string>();


    protected override async Task OnInitializedAsync()
    {
         

            if (!_users.IsLoggedIn())
            {
                navManger.NavigateTo("/");
            }
            else if (_users.IsLoggedIn())
            {
                navManger.NavigateTo("/home");
            }
        

    }

    // set the Selected Reward to the value of the MudSelect or the MudTextField if it is not empty
    private void SetSelectedReward()
    {
        if (selectedReward != "" && customReward == "")
        {
            SelectedRewards.Add(selectedReward);
            selectedReward = "";
        }
        else if (customReward != "")
        {
            SelectedRewards.Add(customReward);
            customReward = "";
        }
    }

    private async Task SaveGoal()
    {
        string reward = "";
        if (selectedReward != "" && customReward == "")
        {
            reward = selectedReward;
        }
        else if (customReward != "")
        {
            reward = customReward;
        }

        Console.WriteLine("Reward: " + reward);
        // Save the goal to the database
        var newGoal = new UserGoals()
            {
                UserId = _users.GetUser().Uid,
                GoalName = goalName,
                GoalLevel = levelRequired,
                Reward = reward
            };

        await _goals.CreateGoal(newGoal);

        navManger.NavigateTo("/home");
    }
}
