@namespace GamifyingTasks.Pages.Components
@using Google.Cloud.Firestore;
@using GamifyingTasks.Firebase.DB
@using GamifyingTasks.Classes
@using GamifyingTasks.Pages.Popups
@using GamifyingTasks.Data
@using GamifyingTasks.Firebase.DB.Interfaces
@inject ITasks _tasks;
@inject IUsers _users;
@inject NavigationManager navManger
<MudPaper Elevation="1" Height="430px">
     <MudCard Elevation="0">
        <MudCardContent class="d-flex flex-column flex-grow-1">
            <div class="d-flex justify-center">
                 <MudText>
                    <b>Today's Tasks</b>
                </MudText>
            </div>
            <div>
                <!-- If we are still loading the data, show a loading message -->
            @if (loading)
            {
            <div class="d-flex justify-center mt-5">
                <MudText> Loading Content</MudText>
            </div>
            }               
            <!-- This message is displayed if the user doesn't have any tasks to display once the content has been loaded from the DB -->  
            @if (todayTasks.Count() <= 0 && !loading)
            {
                <div class="d-flex justify-center mt-5">

                    <MudText>
                        No Tasks Today!
                    </MudText>
                </div>
            }
            <div Style="max-height: 375px; wdith: 75%; overflow-x: hidden; overflow-y: 10; padding-bottom: 20px; padding-right: 10px;">
            @if (todayTasks.Count() > 0 && todayTasks != null && !loading)
            {
                @foreach (var task in todayTasks)
                    {
                        <!-- Before the task is displayed, double check that the task is either not completed, has todays date as the due date
                        or has the default due date of 31/12/9999. The default value is if the user didn't select a date/time specifically for 
                        their task-->
                        @if (task.DueDate.ToDateTime().Date == new DateTime(9999, 12, 31).ToUniversalTime().Date|| task.DueDate.ToDateTime().Date ==
                        Timestamp.FromDateTime(DateTime.UtcNow).ToDateTime().Date && !task.Completed)
                            {       
                                <MudGrid>
                                    <MudItem xs="3">
                                       
                                            <MudPaper class="d-flex d-sm-none align-center justify-center mt-1 ml-6" 
                                            Elevation="0">
                                                <MudButton Variant="Variant.Text" @onclick="() => ToggleViewDetails(task)">
                                                    <MudText Typo="Typo.body2">
                                                         @task.Name
                                                    </MudText>
                                                    <MudPopover Open="@(SelectedTask == task && viewTask)"  OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomRight"
                                                    TransformOrigin="Origin.TopCenter" Paper="false">
                                                        <MudPaper>       
                                                            @if(SelectedTask != null){
                                                                <MudText>
                                                                    @SelectedTask.Description
                                                                </MudText>
                                                                @if (SelectedTask.DueDate != Timestamp.FromDateTime(new DateTime(9999, 12,
                                                                31).ToUniversalTime()))
                                                                {
                                                                    <MudPaper class="d-flex align-center justify-center mt-1 ml-2"
                                                                    Elevation="0">
                                                                        <MudText Typo="Typo.subtitle2">
                                                                            <b>Due Date: @ConvertDate(SelectedTask.DueDate).Result</b>
                                                                        </MudText>
                                                                    </MudPaper>
                                                                }
                                                            }                                                           
                                                        </MudPaper>                                                            
                                                    </MudPopover>
                                                </MudButton>
                                            </MudPaper>
                                        </MudItem>

                                 <!----Mobile Layout Confirm Buttons----->   
                                    <MudItem xs="4">
                                        <MudPaper class="d-flex d-sm-none flex-row gap-2 jusitfy-end ml-6 mt-2" Elevation="0" Width="15%"
                                        Height="65%">
                                            <MudPaper Elevation="0">
                                                <MudFab @onclick="() => CompleteTask(task)" Size="Size.Small" StartIcon="@Icons.Material.Filled.Check" />
                                            </MudPaper>
                                            <MudPaper Elevation="0">
                                                <MudFab Size="Size.Small"@onclick="() => DeleteTask(task.UID)" StartIcon="@Icons.Material.Filled.SkipNext"/>
                                            </MudPaper>
                                        </MudPaper>
                                    </MudItem>
                                </MudGrid>
                                <!----Mobile Layout----->
                                <div class="d-none d-sm-flex flex-row gap-3 justify-space-between mt-3">
                                    <MudButton Variant="Variant.Text" Typo="Typo.body2" @onclick="() => ToggleViewDetails(task)">
                                        <MudText>
                                            @task.Name
                                        </MudText>
                                        <MudPopover Open="@(SelectedTask == task && viewTask)" OverflowBehavior="OverflowBehavior.FlipAlways" AnchorOrigin="Origin.BottomRight" 
                                        TransformOrigin="Origin.TopCenter" Paper="false">
                                            <MudPaper>       
                                                @if(SelectedTask != null){
                                                    <MudText>
                                                        @SelectedTask.Description
                                                    </MudText>
                                                    @if (SelectedTask.DueDate != Timestamp.FromDateTime(new DateTime(9999, 12, 31).ToUniversalTime()))
                                                    {
                                                        <MudPaper class="d-flex align-center justify-center mt-1 ml-2"
                                                        Elevation="0">
                                                            <MudText Typo="Typo.subtitle2">
                                                                <b>Due Date: @ConvertDate(SelectedTask.DueDate).Result</b>
                                                            </MudText>
                                                        </MudPaper>
                                                    }
                                                }
                                            </MudPaper>
                                        </MudPopover>
                                    </MudButton>
                                    <div class="d-flex align-end">
                                        <MudButtonGroup Color="Color.Success" Variant="Variant.Filled">
                                            <MudButton Color="Color.Success" @onclick="() => CompleteTask(task)"  Size="Size.Small">
                                              Confirm                                                
                                            </MudButton>
                                            <MudButton Color="Color.Error" Size="Size.Small" @onclick="() => DeleteTask(task.UID)">                                               
                                                 Skip</MudButton>
                                        </MudButtonGroup>
                                    </div>
                                </div>
                            }                                        
                        }
                    }
                </div>
            </div>
        </MudCardContent>
    </MudCard>
</MudPaper>
@code{
    
    [Parameter]
    public EventCallback<bool> TaskUpdated { get; set; } // Call back to index page to update the task list
    [Parameter]
    public EventCallback<bool> TaskCompleted { get; set; } // Call back to index page to update the task status

    private bool loading = true; // Loading state for the component
    private bool viewTask = false; // View popup state 
    public bool viewAddButtons = false; // View add buttons state
    private Tasks? SelectedTask { get; set; } // Selected task to view details
    public  List<Tasks>tasks = new  List<Tasks>();  // List of tasks
    public List<Tasks> todayTasks = new  List<Tasks>(); // List of tasks for today

    // On initialisation, check if the user is logged in and if they are, refresh the task list
    protected override async Task OnInitializedAsync()
    {
        if (_users.IsLoggedIn())
        {        
            await RefreshTaskList();
            StateHasChanged();
        }
    }


    /// <summary>
    /// Refresh the task list when called
    /// </summary>
    public async Task RefreshTaskList()
    {
        // Get the tasks for today
        todayTasks = _tasks.GetTodaysTasks();

        // If there are tasks for today, invoke the task updated event
        if (todayTasks.Count() > 0 && todayTasks != null)
        {
            await TaskUpdated.InvokeAsync(true);

        }

        // If we are still loading the data, set the loading state to false
        if (loading)
        {
            loading = false;
        }

        // Refresh the state of the component
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// Get the tasks for today
    /// </summary>
    private List<Tasks> GetTodayTasks()
    {
        return  _tasks.GetTodaysTasks();
    }

    /// <summary>
    /// Toggle the view of the task details popup
    /// </summary>
    private void ToggleViewDetails(Tasks task)
    {
        SelectedTask = task;
        if (viewTask)
            viewTask = false;
        else
            viewTask = true;

    }

    /// <summary>
    /// Toggle the view of the add buttons
    /// </summary>
    private void ToggleAddPopup()
    {
        if (viewAddButtons)
            viewAddButtons = false;
        else
            viewAddButtons = true;

        Console.WriteLine(viewAddButtons);
    }

    /// <summary>
    /// Complete a task
    /// </summary>
    public async Task CompleteTask(Tasks task)
    {
        await UserLevelCaluclations.TaskCompleted(task, _tasks, _users);
        await TaskCompleted.InvokeAsync(true);
    }


    /// <summary>
    /// Delete a task
    /// </summary>
    public async Task DeleteTask(string uid)
    {
        await _tasks.DeleteTask(uid);
        await RefreshTaskList();
    }

    /// <summary>
    /// Convert the date to a string
    /// </summary>    
    private async Task<string> ConvertDate(Timestamp timestamp)
    {
        var dt = timestamp.ToDateTime();
        return dt.ToString("dd-MM-yyyy");
    }
}