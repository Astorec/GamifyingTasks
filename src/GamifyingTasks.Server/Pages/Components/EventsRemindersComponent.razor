@using GamifyingTasks.Classes
@using GamifyingTasks.Firebase.DB
@using GamifyingTasks.Firebase.DB.Interfaces
@inject IUsers _users
@inject IEvents _events
<MudPaper Elevation="1" Height="380px">
    <div class="d-flex justify-center">
        <MudText>
            <b>Events & Reminders</b>
        </MudText>
    </div>

    <MudTable Items="@userEvents" Loading="@loading" Breakpoint="Breakpoint.None">
        <HeaderContent>
            <MudTh>
                Name
            </MudTh>
            <MudTh>
                Description
            </MudTh>
            <MudTh>
                Location
            </MudTh>
            <MudTh>
                Date
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">
                @context.EventName
            </MudTd>
            <MudTd DataLabel="Description">
                @context.Description
            </MudTd>
            <MudTd DataLabel="Location">
                @context.EventLocation
            </MudTd>
            <MudTd DataLabel="Date">
                @DateOnly.FromDateTime(context.EventDate.ToDateTime()).ToString("dd/MM/yyyy")
            </MudTd>
        </RowTemplate>
    </MudTable>

</MudPaper>

@code {

    [Parameter]
    public EventCallback<bool> EventUpdated { get; set; } // Call back to index page to update the task list
    private List<Events> userEvents = new List<Events>();
    private bool loading = true;

   protected override async Task OnInitializedAsync()
    {
        if (_users.IsLoggedIn())
        {        
            await RefreshList();
            StateHasChanged();
        }
    }
    public async Task RefreshList()
    {
        userEvents = _events.GetAllEvents();

        if (userEvents.Count > 0 && userEvents != null)
        {
            await EventUpdated.InvokeAsync(true);
        }

        if (loading)
        {
            loading = false;
        }

        // Refresh the state of the component
        await InvokeAsync(() => StateHasChanged());

    }
}