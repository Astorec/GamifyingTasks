@page "/"
@inject NavigationManager NavManager
@using GamifyingTasks.Firebase.DB
@using GamifyingTasks.Firebase.Authentication
@using Google.Cloud.Firestore
<MudMainContent>
    <MudTabs>
        <MudTabPanel Text="Login">
            <MudForm @onsubmit="HandleLogin">
                <MudTextField Label="Email" @bind-Value="email" T="string" Required="true"
                    RequiredError="Please enter your e-mail" Error="@emailBlank"/>
                <MudTextField Label="Password" InputType="@PasswordInput" @bind-Value="pass" T="string" Required="true"
                    RequiredError="Please enter your password" Password Error="@passBlank"/>
                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit">Login</MudButton>
                @if(invalidLogin)
                {
                    <MudAlert Severity="Severity.Error" class="mt-2">Invalid Login</MudAlert>
                }
            </MudForm>
        </MudTabPanel>
        <MudTabPanel Text="Register">
            <MudForm @onsubmit="HandleRegister">
                <MudTextField Label="Username" @bind-Value="regUserName" T="string" Required="true" 
                RequiredError="Please enter a Username" Error="@regUserBlank"/>
                <MudTextField Label="Email" @bind-Value="regEmail" T="string" Required="true" 
                RequiredError="Please enter an e-mail address" Error="@regEmailBlank"/>
                <MudTextField Label="Password" InputType="@PasswordInput" @bind-Value="regPass" T="string" Required="true"
                   RequiredError="Please enter a Password" Password Error="@regPassBlank" />
                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit">Register</MudButton>
                 @if(userExists)
                {
                    <MudAlert Severity="Severity.Error" class="mt-2">E-mail already exists</MudAlert>
                }
            </MudForm>

        </MudTabPanel>
    </MudTabs>
</MudMainContent>


@code {
    InputType PasswordInput = InputType.Password;

    private string email, pass;
    private string regEmail, regPass, regUserName;
    private bool invalidLogin = false;
    private bool userExists = false;
    private bool regEmailBlank, regPassBlank, regUserBlank;
    private bool emailBlank, passBlank;

    private async Task HandleLogin()
    {
        invalidLogin = false;
        await DBCore.GetUsers();

        if (!string.IsNullOrWhiteSpace(email) && !string.IsNullOrWhiteSpace(pass))
        {
            try
            {
                var currentUser = await FirebaseAuth.GetClient().SignInWithEmailAndPasswordAsync(email, pass);
                DBCore.IsLoggedIn = true;
                DBCore.SetCurrentUser(currentUser.User);
                await DBCore.GetUserGoals();
                await DBCore.GetTasks();
                NavManager.NavigateTo("/home");
            }
            catch (Exception ex)
            {
                invalidLogin = true;
                Console.WriteLine($"Error in HandleLogin(): {ex.Message}\n\nStack Trace: {ex.StackTrace}");
            }
        }
        else{
            if(string.IsNullOrWhiteSpace(email))
            {
                emailBlank = true;
            }
            if(string.IsNullOrWhiteSpace(pass))
            {
                passBlank = true;
            }
        }
    }

    private async Task HandleRegister()
    {
        userExists = false;
        regPassBlank = false;
        regEmailBlank = false; 
        regUserBlank = false;
        if (!string.IsNullOrWhiteSpace(regUserName) && !string.IsNullOrWhiteSpace(regEmail) && !string.IsNullOrWhiteSpace(regPass))
        {
            Console.WriteLine("Hit 02");
            try
            {
                var regUser = await FirebaseAuth.GetClient().CreateUserWithEmailAndPasswordAsync(regEmail, regPass, regUserName);

                var currentUser = await FirebaseAuth.GetClient().SignInWithEmailAndPasswordAsync(regEmail, regPass);
                var newUser = new Classes.Users
                    {
                        Uid = currentUser.User.Uid,
                        UserName = regUserName,
                        Email = regEmail,
                        DayReg = Timestamp.FromDateTime(DateTime.UtcNow),
                        Level = 1,
                        Exp = 0,
                        requiredExp = 200,
                        LastLogin = Timestamp.FromDateTime(DateTime.UtcNow),
                        LoginStreak = 1,
                        LongestStreak = 1,
                        PfpUrl = ""
                    };

                await DBCore.AddNewUser(newUser);
                DBCore.SetCurrentUser(currentUser.User);

                NavManager.NavigateTo("/newUser");


            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in HandleRegister(): {ex.Message}\n\nStack Trace: {ex.StackTrace}");
            }
        }
        else
        {
            if(string.IsNullOrWhiteSpace(regUserName))
            {
                regUserBlank = true;
            }
            if(string.IsNullOrWhiteSpace(regEmail))
            {
                regEmailBlank = true;
            }
            if(string.IsNullOrWhiteSpace(regPass))
            {
                regPassBlank = true;
            }
        }
    }
}