@using GamifyingTasks.Pages.Popups
@inject IDialogService DialogService
@using Google.Cloud.Firestore;
@using GamifyingTasks.Firebase.DB
@using GamifyingTasks.Classes
@using GamifyingTasks.Interfaces
@inject NavigationManager navManger
<div class="d-flex align-end justify-end">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" aria-label="newItem" Size="Size.Large" Color="Color.Info"
        @onclick="ToggleAddPopup">
    </MudIconButton>
    <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@viewAddButtons" AnchorOrigin="Origin.TopRight"
        TransformOrigin="Origin.BottomRight" Class="pa-4">
        <MudPaper>
            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled" VerticalAlign="true">
                <MudButton OnClick="@OpenAddNewTask">Add New Task</MudButton>
                <MudButton OnClick="@OpenAddNewTask">Add New Event</MudButton>
                <MudButton OnClick="@OpenAddNewTask">Add New Reminder</MudButton>
            </MudButtonGroup>
        </MudPaper>
    </MudPopover>
</div>

@code {
    [Parameter]
    public EventCallback<bool> TaskAdded { get; set; }
    public bool viewAddButtons = false;
    public Dictionary<string, Tasks> tasks = new Dictionary<string, Tasks>();
    public Dictionary<string, Tasks> todayTasks = new Dictionary<string, Tasks>();
    public Dictionary<string, Tasks> upcomingTasks = new Dictionary<string, Tasks>();

    private async Task OpenAddNewTask()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "popup-style" };
        var dialog = DialogService.Show<AddNewTask>("Add new task", options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await DBCore.GetAllTasks();
            await TaskAdded.InvokeAsync(true);
        }

    }
    private void ToggleAddPopup()
    {
        if (viewAddButtons)
            viewAddButtons = false;
        else
            viewAddButtons = true;

        Console.WriteLine(viewAddButtons);
    }
}